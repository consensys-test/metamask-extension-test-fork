name: Test Release Process

on:
  workflow_dispatch:
    inputs:
      test-version:
        description: 'Test version to simulate (e.g., 99.0.0)'
        required: true
        type: string
        default: '99.0.0'
      test-type:
        description: 'Type of test to run'
        required: true
        type: choice
        options:
          - create-release-branch
          - simulate-merge
          - full-process
        default: full-process

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

jobs:
  create-test-release-branch:
    name: Create Test Release Branch
    if: inputs.test-type == 'create-release-branch' || inputs.test-type == 'full-process'
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.create-branch.outputs.branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Create release branch
        id: create-branch
        run: |
          VERSION="${{ inputs.test-version }}"
          BRANCH_NAME="Version-v${VERSION}"

          # Check if branch already exists
          if git ls-remote --heads origin "${BRANCH_NAME}" | grep -q "${BRANCH_NAME}"; then
            echo "Branch ${BRANCH_NAME} already exists, deleting it first..."
            git push origin --delete "${BRANCH_NAME}" || true
          fi

          # Create new branch from main
          git checkout -b "${BRANCH_NAME}"

          # Create a test change
          echo "Test release ${VERSION}" > test-release-${VERSION}.txt
          git add test-release-${VERSION}.txt
          git commit -m "Test: Version v${VERSION}

          This is a test release branch for testing the new release process.
          - Tag will be created on this branch
          - Then merged to main/master
          - Tag should be in main/master history after merge"

          # Push the branch
          git push origin "${BRANCH_NAME}"

          echo "branch=${BRANCH_NAME}" >> "$GITHUB_OUTPUT"
          echo "‚úÖ Created test release branch: ${BRANCH_NAME}"

      - name: Create test PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.create-branch.outputs.branch }}"
          VERSION="${{ inputs.test-version }}"

          # Create PR to main (or master if it exists)
          TARGET_BRANCH="main"
          if git ls-remote --heads origin master | grep -q master; then
            TARGET_BRANCH="master"
          fi

          PR_URL=$(gh pr create \
            --title "üß™ Test Release PR: v${VERSION}" \
            --body "## Test Release PR

            This is a test PR to validate the new release process.

            ### Test Objectives
            1. Verify that check-release-tag workflow runs
            2. Test the tag-release-branch workflow
            3. Confirm tag appears in target branch after merge
            4. Validate release creation script

            ### Process to Test
            1. ‚úÖ Release branch created: ${BRANCH_NAME}
            2. ‚è≥ Run 'Tag Release Branch' workflow
            3. ‚è≥ Merge this PR with a merge commit
            4. ‚è≥ Verify tag in target branch
            5. ‚è≥ Check if release is created

            ### Notes
            - This is a test PR and can be closed/deleted after testing
            - Version: v${VERSION}
            - Target: ${TARGET_BRANCH}" \
            --base "${TARGET_BRANCH}" \
            --head "${BRANCH_NAME}" \
            --label "test-release")

          echo "Created test PR: ${PR_URL}"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "## üß™ Test Release Branch Created" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Branch**: ${BRANCH_NAME}" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Version**: v${VERSION}" >> "$GITHUB_STEP_SUMMARY"
          echo "- **PR**: ${PR_URL}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Next Steps" >> "$GITHUB_STEP_SUMMARY"
          echo "1. Go to the PR and observe the check-release-tag workflow" >> "$GITHUB_STEP_SUMMARY"
          echo "2. Run the 'Tag Release Branch' workflow with version ${VERSION}" >> "$GITHUB_STEP_SUMMARY"
          echo "3. Observe the PR update with tag information" >> "$GITHUB_STEP_SUMMARY"
          echo "4. Merge the PR using a merge commit" >> "$GITHUB_STEP_SUMMARY"
          echo "5. Check if the tag appears in the target branch" >> "$GITHUB_STEP_SUMMARY"

  simulate-merge:
    name: Simulate Post-Merge Actions
    if: inputs.test-type == 'simulate-merge'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Simulate merge commit
        run: |
          VERSION="${{ inputs.test-version }}"

          # Create a simulated merge commit message
          echo "Simulating merge of Version-v${VERSION}"

          # Check if tag exists
          TAG="v${VERSION}"
          if git rev-parse "${TAG}" >/dev/null 2>&1; then
            echo "‚úÖ Tag ${TAG} exists"
            TAG_SHA=$(git rev-parse "${TAG}")
            echo "Tag SHA: ${TAG_SHA}"

            # Check if tag is in main/master
            if git branch --contains "${TAG}" | grep -E "main|master"; then
              echo "‚úÖ Tag is in main/master branch"
            else
              echo "‚ö†Ô∏è  Tag exists but not in main/master"
            fi
          else
            echo "‚ùå Tag ${TAG} does not exist"
            echo "This would trigger the fallback in release-create-gh-release.sh"
          fi

      - name: Test release script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ inputs.test-version }}"

          # Set up environment for the script
          export GITHUB_REPOSITORY="${{ github.repository }}"
          export GITHUB_SHA="${{ github.sha }}"

          # Create a test commit message
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit --allow-empty -m "Merge pull request #999 from test/Version-v${VERSION}

          Test: Version v${VERSION}"

          # Run the release creation script
          echo "Running release creation script..."
          bash .github/scripts/release-create-gh-release.sh || {
            echo "Script failed, but continuing for test purposes"
          }

  cleanup-test:
    name: Cleanup Test Artifacts
    if: always() && inputs.test-type == 'full-process'
    needs: [create-test-release-branch]
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup test branches and tags
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ inputs.test-version }}"

          echo "üßπ Cleaning up test artifacts for version ${VERSION}"

          # Note: Manual cleanup may be needed for:
          # - Test branches: Version-v${VERSION}
          # - Test tags: v${VERSION}
          # - Test PRs
          # - Test releases

          echo "Cleanup complete. Please manually verify and remove any remaining test artifacts."
