name: Publish Release (Fork Test)

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      simulate-version:
        description: 'Version to simulate in commit message'
        required: false
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: read

jobs:
  check-and-publish:
    name: Check and Publish Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Check commit message
        id: check-commit
        run: |
          # Get the commit message
          if [[ -n "${{ inputs.simulate-version }}" ]]; then
            # For manual testing, create a simulated commit
            VERSION="${{ inputs.simulate-version }}"
            git commit --allow-empty -m "Test: Merge Version-v${VERSION}

            Simulated merge commit for testing release creation"
            COMMIT_MSG=$(git log -1 --pretty=%s)
          else
            COMMIT_MSG=$(git log -1 --pretty=%s)
          fi

          echo "Commit message: ${COMMIT_MSG}"

          # Check if this is a release merge
          if [[ "${COMMIT_MSG}" =~ Version[-[:space:]](v[[:digit:]]+.[[:digit:]]+.[[:digit:]]+) ]] || \
             [[ "${COMMIT_MSG}" =~ release[/-]([[:digit:]]+.[[:digit:]]+.[[:digit:]]+) ]]; then
            echo "is-release=true" >> "$GITHUB_OUTPUT"
            echo "This appears to be a release merge"
          else
            echo "is-release=false" >> "$GITHUB_OUTPUT"
            echo "Not a release merge, skipping release creation"
          fi

      - name: Run release creation script
        if: steps.check-commit.outputs.is-release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📦 Running release creation script..."

          # Export required environment variables
          export GITHUB_REPOSITORY="${{ github.repository }}"
          export GITHUB_SHA="${{ github.sha }}"

          # Make script executable if not already
          chmod +x .github/scripts/release-create-gh-release.sh

          # Run the script
          ./.github/scripts/release-create-gh-release.sh || {
            echo "::warning::Release script failed, check logs"
            exit 1
          }

      - name: Verify tag in branch
        if: steps.check-commit.outputs.is-release == 'true'
        run: |
          # Extract version from commit
          COMMIT_MSG=$(git log -1 --pretty=%s)
          if [[ "${COMMIT_MSG}" =~ v([[:digit:]]+.[[:digit:]]+.[[:digit:]]+) ]]; then
            TAG="v${BASH_REMATCH[1]}"
          elif [[ "${COMMIT_MSG}" =~ ([[:digit:]]+.[[:digit:]]+.[[:digit:]]+) ]]; then
            TAG="v${BASH_REMATCH[1]}"
          fi

          if [[ -n "${TAG}" ]]; then
            echo "Checking if tag ${TAG} is in current branch..."

            # Fetch all tags
            git fetch --tags

            # Check if tag exists
            if git rev-parse "${TAG}" >/dev/null 2>&1; then
              echo "✅ Tag ${TAG} exists"

              # Check if tag is in current branch
              if git branch --contains "${TAG}" | grep -E "^\*"; then
                echo "✅ Tag ${TAG} is in the current branch"

                # Get tag details
                echo "Tag details:"
                git show "${TAG}" --no-patch
              else
                echo "⚠️ Tag ${TAG} exists but is not in the current branch"
                echo "This may indicate the tag was created at merge instead of on the release branch"
              fi
            else
              echo "❌ Tag ${TAG} does not exist"
              echo "The release creation script should have created it or found it"
            fi
          fi

      - name: Summary
        if: always()
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          # 🧪 Fork Test - Publish Release Workflow

          ## Trigger Information
          - **Event**: ${{ github.event_name }}
          - **Ref**: ${{ github.ref }}
          - **SHA**: ${{ github.sha }}
          EOF

          if [[ "${{ steps.check-commit.outputs.is-release }}" == "true" ]]; then
            echo "- **Status**: ✅ Release detected and processed" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- **Status**: ℹ️ Not a release commit" >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "## Notes" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          if [[ -n "${{ inputs.simulate-version }}" ]]; then
            echo "This was a manual test with simulated version: ${{ inputs.simulate-version }}" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "This workflow ran automatically on push to ${{ github.ref_name }}" >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Testing the Complete Flow" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "1. Create a release branch using 'Test Release Process' workflow" >> "$GITHUB_STEP_SUMMARY"
          echo "2. Tag it using 'Tag Release Branch' workflow" >> "$GITHUB_STEP_SUMMARY"
          echo "3. Merge the PR with a merge commit" >> "$GITHUB_STEP_SUMMARY"
          echo "4. This workflow will automatically run and create the release" >> "$GITHUB_STEP_SUMMARY"
