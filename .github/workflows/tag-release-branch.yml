name: Tag Release Branch (Fork Test)

on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Release version (e.g., 12.0.0)'
        required: true
        type: string
      release-branch:
        description: 'Release branch name (e.g., Version-v12.0.0)'
        required: false
        type: string
      target-branch:
        description: 'Target branch for merge (main or master)'
        required: true
        type: choice
        options:
          - main
          - master
        default: main

permissions:
  contents: write
  pull-requests: write

jobs:
  tag-release:
    name: Tag Release Branch
    runs-on: ubuntu-latest
    steps:
      - name: Determine release branch
        id: determine-branch
        run: |
          if [[ -n "${{ inputs.release-branch }}" ]]; then
            echo "branch=${{ inputs.release-branch }}" >> "$GITHUB_OUTPUT"
          else
            # Try both patterns
            BRANCH_V="Version-v${{ inputs.release-version }}"
            BRANCH_RELEASE="release/${{ inputs.release-version }}"

            # Check which pattern exists (for testing, we'll use Version-v pattern)
            echo "branch=${BRANCH_V}" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.determine-branch.outputs.branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for successful builds
        id: check-builds
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH="${{ steps.determine-branch.outputs.branch }}"

          # Get recent workflow runs on this branch
          echo "Checking for successful builds on branch: ${BRANCH}"

          # For testing in fork, we'll be more lenient with build checks
          SUCCESSFUL_RUNS=$(gh run list \
            --branch "${BRANCH}" \
            --status success \
            --limit 5 \
            --json conclusion,headBranch,createdAt \
            --jq 'length' || echo "0")

          if [[ "${SUCCESSFUL_RUNS}" -eq 0 ]]; then
            echo "⚠️  WARNING: No successful workflow runs found on branch ${BRANCH}"
            echo "For testing purposes, continuing anyway..."
            echo "has-successful-builds=false" >> "$GITHUB_OUTPUT"
          else
            echo "✅ Found ${SUCCESSFUL_RUNS} successful workflow run(s)"
            echo "has-successful-builds=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Create and push tag
        id: tag-release
        run: |
          TAG="v${{ inputs.release-version }}"

          # Check if tag already exists
          if git rev-parse "${TAG}" >/dev/null 2>&1; then
            echo "❌ Tag ${TAG} already exists!"
            exit 1
          fi

          # Create annotated tag
          git tag -a "${TAG}" -m "Release ${TAG} (Fork Test)

          Tagged from branch: ${{ steps.determine-branch.outputs.branch }}
          Tagged by: GitHub Actions
          Test release for fork validation"

          # Push the tag
          git push origin "${TAG}"

          echo "✅ Successfully created and pushed tag ${TAG}"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Create or update merge PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCH: ${{ steps.determine-branch.outputs.branch }}
          VERSION: ${{ inputs.release-version }}
          TARGET_BRANCH: ${{ inputs.target-branch }}
          TAG_NAME: ${{ steps.tag-release.outputs.tag }}
          TAG_SHA: ${{ steps.tag-release.outputs.sha }}
        run: |
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --base "${TARGET_BRANCH}" --head "${RELEASE_BRANCH}" --json number --jq '.[0].number' || echo "")

          if [[ -n "${EXISTING_PR}" ]]; then
            echo "PR already exists: #${EXISTING_PR}"

            # Update the PR description
            gh pr edit "${EXISTING_PR}" \
              --body "## 🧪 Fork Test Release Information

              - **Version**: ${TAG_NAME}
              - **Release Branch**: ${RELEASE_BRANCH}
              - **Tag SHA**: ${TAG_SHA}
              - **Target Branch**: ${TARGET_BRANCH}

              ## ✅ Release Status

              This release has been **tagged** at commit ${TAG_SHA:0:7}.

              The tag \`${TAG_NAME}\` has been created on the release branch HEAD.

              ## Merge Instructions

              **IMPORTANT**: This PR must be merged using a **merge commit** (NOT squash and merge).

              After merging:
              1. The tagged commit will be part of ${TARGET_BRANCH} history
              2. You can verify the tag is in the branch: \`git branch --contains ${TAG_NAME}\`
              3. Test the publish-release workflow (if configured)

              ## Test Checklist

              - [x] Release branch created
              - [x] Release tagged at branch HEAD
              - [ ] Ready to merge to ${TARGET_BRANCH}
              - [ ] Verify tag in target branch after merge"

                        echo "Updated PR #${EXISTING_PR} with tag information"

            # Try to create label first, then add it (ignore failures)
            gh label create "release-tagged" --description "Release has been tagged" --color "0e8a16" 2>/dev/null || true
            gh pr edit "${EXISTING_PR}" --add-label "release-tagged" 2>/dev/null || echo "Note: Could not add release-tagged label (not critical)"
          else
            # Create new PR
            PR_URL=$(gh pr create \
              --title "🧪 Test Release: v${VERSION} to ${TARGET_BRANCH}" \
              --body "## 🧪 Fork Test Release Information

              - **Version**: ${TAG_NAME}
              - **Release Branch**: ${RELEASE_BRANCH}
              - **Tag SHA**: ${TAG_SHA}
              - **Target Branch**: ${TARGET_BRANCH}

              ## ✅ Release Status

              This release has been **tagged** at commit ${TAG_SHA:0:7}.

              The tag \`${TAG_NAME}\` has been created on the release branch HEAD.

              ## Merge Instructions

              **IMPORTANT**: This PR must be merged using a **merge commit** (NOT squash and merge).

              After merging:
              1. The tagged commit will be part of ${TARGET_BRANCH} history
              2. You can verify the tag is in the branch: \`git branch --contains ${TAG_NAME}\`
              3. Test the publish-release workflow (if configured)

              ## Test Checklist

              - [x] Release branch created
              - [x] Release tagged at branch HEAD
              - [ ] Ready to merge to ${TARGET_BRANCH}
              - [ ] Verify tag in target branch after merge" \
              --base "${TARGET_BRANCH}" \
              --head "${RELEASE_BRANCH}")

            # Try to create and add labels (ignore failures)
            gh label create "test-release" --description "Test release PR" --color "0e8a16" 2>/dev/null || true
            gh label create "release-${VERSION}" --description "Release version ${VERSION}" --color "d73a4a" 2>/dev/null || true
            gh label create "release-tagged" --description "Release has been tagged" --color "0e8a16" 2>/dev/null || true

            PR_NUMBER=$(echo "${PR_URL}" | grep -oE '[0-9]+$')
            echo "Created PR #${PR_NUMBER}"

            # Try to add labels to the new PR (ignore failures)
            gh pr edit "${PR_NUMBER}" --add-label "test-release" 2>/dev/null || true
            gh pr edit "${PR_NUMBER}" --add-label "release-${VERSION}" 2>/dev/null || true
            gh pr edit "${PR_NUMBER}" --add-label "release-tagged" 2>/dev/null || echo "Note: Could not add all labels (not critical)"
          fi

      - name: Summary
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          # 🧪 Fork Test Release Tagged Successfully

          ## Tag Information
          - **Tag**: ${{ steps.tag-release.outputs.tag }}
          - **SHA**: ${{ steps.tag-release.outputs.sha }}
          - **Branch**: ${{ steps.determine-branch.outputs.branch }}

          ## Next Steps
          1. Review the PR that was created/updated
          2. Merge using a **merge commit** (not squash)
          3. Verify the tag exists in the target branch after merge
          4. Test any downstream workflows

          ## Verification Commands
          After merge, you can verify with:
          \`\`\`bash
          # Check if tag is in target branch
          git fetch --tags
          git branch --contains ${{ steps.tag-release.outputs.tag }}

          # View tag details
          git show ${{ steps.tag-release.outputs.tag }}
          \`\`\`
          EOF
